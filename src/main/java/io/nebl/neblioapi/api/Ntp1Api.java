/*
 * Neblio REST API Suite
 * APIs for Interacting with NTP1 Tokens & The Neblio Blockchain
 *
 * OpenAPI spec version: 1.2.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.nebl.neblioapi.api;

import io.nebl.neblioapi.ApiCallback;
import io.nebl.neblioapi.ApiClient;
import io.nebl.neblioapi.ApiException;
import io.nebl.neblioapi.ApiResponse;
import io.nebl.neblioapi.Configuration;
import io.nebl.neblioapi.Pair;
import io.nebl.neblioapi.ProgressRequestBody;
import io.nebl.neblioapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.nebl.neblioapi.models.BroadcastTxRequest;
import io.nebl.neblioapi.models.BroadcastTxResponse;
import io.nebl.neblioapi.models.BurnTokenRequest;
import io.nebl.neblioapi.models.BurnTokenResponse;
import io.nebl.neblioapi.models.Error;
import io.nebl.neblioapi.models.GetAddressInfoResponse;
import io.nebl.neblioapi.models.GetTokenHoldersResponse;
import io.nebl.neblioapi.models.GetTokenIdResponse;
import io.nebl.neblioapi.models.GetTokenMetadataResponse;
import io.nebl.neblioapi.models.GetTransactionInfoResponse;
import io.nebl.neblioapi.models.IssueTokenRequest;
import io.nebl.neblioapi.models.IssueTokenResponse;
import io.nebl.neblioapi.models.SendTokenRequest;
import io.nebl.neblioapi.models.SendTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Ntp1Api {
    private ApiClient localVarApiClient;

    public Ntp1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Ntp1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for broadcastTx
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call broadcastTxCall(BroadcastTxRequest broadcastTxRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = broadcastTxRequest;

        // create path and map variables
        String localVarPath = "/ntp1/broadcast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call broadcastTxValidateBeforeCall(BroadcastTxRequest broadcastTxRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'broadcastTxRequest' is set
        if (broadcastTxRequest == null) {
            throw new ApiException("Missing the required parameter 'broadcastTxRequest' when calling broadcastTx(Async)");
        }
        

        okhttp3.Call localVarCall = broadcastTxCall(broadcastTxRequest, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Broadcasts a signed raw transaction to the network
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @return BroadcastTxResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BroadcastTxResponse broadcastTx(BroadcastTxRequest broadcastTxRequest) throws ApiException {
        ApiResponse<BroadcastTxResponse> localVarResp = broadcastTxWithHttpInfo(broadcastTxRequest);
        return localVarResp.getData();
    }

    /**
     * Broadcasts a signed raw transaction to the network
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @return ApiResponse&lt;BroadcastTxResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BroadcastTxResponse> broadcastTxWithHttpInfo(BroadcastTxRequest broadcastTxRequest) throws ApiException {
        okhttp3.Call localVarCall = broadcastTxValidateBeforeCall(broadcastTxRequest, null, null);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Broadcasts a signed raw transaction to the network (asynchronously)
     * Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction. 
     * @param broadcastTxRequest Object representing a transaction to broadcast (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call broadcastTxAsync(BroadcastTxRequest broadcastTxRequest, final ApiCallback<BroadcastTxResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = broadcastTxValidateBeforeCall(broadcastTxRequest, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<BroadcastTxResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for burnToken
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call burnTokenCall(BurnTokenRequest burnTokenRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = burnTokenRequest;

        // create path and map variables
        String localVarPath = "/ntp1/burntoken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call burnTokenValidateBeforeCall(BurnTokenRequest burnTokenRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'burnTokenRequest' is set
        if (burnTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'burnTokenRequest' when calling burnToken(Async)");
        }
        

        okhttp3.Call localVarCall = burnTokenCall(burnTokenRequest, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Builds a transaction that burns an NTP1 Token
     * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @return BurnTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BurnTokenResponse burnToken(BurnTokenRequest burnTokenRequest) throws ApiException {
        ApiResponse<BurnTokenResponse> localVarResp = burnTokenWithHttpInfo(burnTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Builds a transaction that burns an NTP1 Token
     * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @return ApiResponse&lt;BurnTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BurnTokenResponse> burnTokenWithHttpInfo(BurnTokenRequest burnTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = burnTokenValidateBeforeCall(burnTokenRequest, null, null);
        Type localVarReturnType = new TypeToken<BurnTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Builds a transaction that burns an NTP1 Token (asynchronously)
     * Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain. 
     * @param burnTokenRequest Object representing the token to be burned (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call burnTokenAsync(BurnTokenRequest burnTokenRequest, final ApiCallback<BurnTokenResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = burnTokenValidateBeforeCall(burnTokenRequest, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<BurnTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAddressInfo
     * @param address Neblio Address to get information on. (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAddressInfoCall(String address, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ntp1/addressinfo/{address}"
            .replaceAll("\\{" + "address" + "\\}", localVarApiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAddressInfoValidateBeforeCall(String address, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAddressInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getAddressInfoCall(address, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Information On a Neblio Address
     * Returns both NEBL and NTP1 token UTXOs held at the given address. 
     * @param address Neblio Address to get information on. (required)
     * @return GetAddressInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetAddressInfoResponse getAddressInfo(String address) throws ApiException {
        ApiResponse<GetAddressInfoResponse> localVarResp = getAddressInfoWithHttpInfo(address);
        return localVarResp.getData();
    }

    /**
     * Information On a Neblio Address
     * Returns both NEBL and NTP1 token UTXOs held at the given address. 
     * @param address Neblio Address to get information on. (required)
     * @return ApiResponse&lt;GetAddressInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetAddressInfoResponse> getAddressInfoWithHttpInfo(String address) throws ApiException {
        okhttp3.Call localVarCall = getAddressInfoValidateBeforeCall(address, null, null);
        Type localVarReturnType = new TypeToken<GetAddressInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information On a Neblio Address (asynchronously)
     * Returns both NEBL and NTP1 token UTXOs held at the given address. 
     * @param address Neblio Address to get information on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAddressInfoAsync(String address, final ApiCallback<GetAddressInfoResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = getAddressInfoValidateBeforeCall(address, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<GetAddressInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenHolders
     * @param tokenid TokenId to request metadata for (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTokenHoldersCall(String tokenid, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ntp1/stakeholders/{tokenid}"
            .replaceAll("\\{" + "tokenid" + "\\}", localVarApiClient.escapeString(tokenid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenHoldersValidateBeforeCall(String tokenid, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokenid' is set
        if (tokenid == null) {
            throw new ApiException("Missing the required parameter 'tokenid' when calling getTokenHolders(Async)");
        }
        

        okhttp3.Call localVarCall = getTokenHoldersCall(tokenid, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Get Addresses Holding a Token
     * Returns the the the addresses holding a token and how many tokens are held 
     * @param tokenid TokenId to request metadata for (required)
     * @return GetTokenHoldersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTokenHoldersResponse getTokenHolders(String tokenid) throws ApiException {
        ApiResponse<GetTokenHoldersResponse> localVarResp = getTokenHoldersWithHttpInfo(tokenid);
        return localVarResp.getData();
    }

    /**
     * Get Addresses Holding a Token
     * Returns the the the addresses holding a token and how many tokens are held 
     * @param tokenid TokenId to request metadata for (required)
     * @return ApiResponse&lt;GetTokenHoldersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTokenHoldersResponse> getTokenHoldersWithHttpInfo(String tokenid) throws ApiException {
        okhttp3.Call localVarCall = getTokenHoldersValidateBeforeCall(tokenid, null, null);
        Type localVarReturnType = new TypeToken<GetTokenHoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Addresses Holding a Token (asynchronously)
     * Returns the the the addresses holding a token and how many tokens are held 
     * @param tokenid TokenId to request metadata for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTokenHoldersAsync(String tokenid, final ApiCallback<GetTokenHoldersResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = getTokenHoldersValidateBeforeCall(tokenid, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTokenHoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenId
     * @param tokensymbol Token symbol (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTokenIdCall(String tokensymbol, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ntp1/tokenid/{tokensymbol}"
            .replaceAll("\\{" + "tokensymbol" + "\\}", localVarApiClient.escapeString(tokensymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenIdValidateBeforeCall(String tokensymbol, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokensymbol' is set
        if (tokensymbol == null) {
            throw new ApiException("Missing the required parameter 'tokensymbol' when calling getTokenId(Async)");
        }
        

        okhttp3.Call localVarCall = getTokenIdCall(tokensymbol, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Returns the tokenId representing a token
     * Translates a token symbol to a tokenId if a token exists with that symbol on the network 
     * @param tokensymbol Token symbol (required)
     * @return GetTokenIdResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTokenIdResponse getTokenId(String tokensymbol) throws ApiException {
        ApiResponse<GetTokenIdResponse> localVarResp = getTokenIdWithHttpInfo(tokensymbol);
        return localVarResp.getData();
    }

    /**
     * Returns the tokenId representing a token
     * Translates a token symbol to a tokenId if a token exists with that symbol on the network 
     * @param tokensymbol Token symbol (required)
     * @return ApiResponse&lt;GetTokenIdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTokenIdResponse> getTokenIdWithHttpInfo(String tokensymbol) throws ApiException {
        okhttp3.Call localVarCall = getTokenIdValidateBeforeCall(tokensymbol, null, null);
        Type localVarReturnType = new TypeToken<GetTokenIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the tokenId representing a token (asynchronously)
     * Translates a token symbol to a tokenId if a token exists with that symbol on the network 
     * @param tokensymbol Token symbol (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTokenIdAsync(String tokensymbol, final ApiCallback<GetTokenIdResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = getTokenIdValidateBeforeCall(tokensymbol, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTokenIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenMetadata
     * @param tokenid TokenId to request metadata for (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTokenMetadataCall(String tokenid, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ntp1/tokenmetadata/{tokenid}"
            .replaceAll("\\{" + "tokenid" + "\\}", localVarApiClient.escapeString(tokenid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenMetadataValidateBeforeCall(String tokenid, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokenid' is set
        if (tokenid == null) {
            throw new ApiException("Missing the required parameter 'tokenid' when calling getTokenMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = getTokenMetadataCall(tokenid, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Get Metadata of Token
     * Returns the metadata associated with a token. 
     * @param tokenid TokenId to request metadata for (required)
     * @return GetTokenMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTokenMetadataResponse getTokenMetadata(String tokenid) throws ApiException {
        ApiResponse<GetTokenMetadataResponse> localVarResp = getTokenMetadataWithHttpInfo(tokenid);
        return localVarResp.getData();
    }

    /**
     * Get Metadata of Token
     * Returns the metadata associated with a token. 
     * @param tokenid TokenId to request metadata for (required)
     * @return ApiResponse&lt;GetTokenMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTokenMetadataResponse> getTokenMetadataWithHttpInfo(String tokenid) throws ApiException {
        okhttp3.Call localVarCall = getTokenMetadataValidateBeforeCall(tokenid, null, null);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Metadata of Token (asynchronously)
     * Returns the metadata associated with a token. 
     * @param tokenid TokenId to request metadata for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTokenMetadataAsync(String tokenid, final ApiCallback<GetTokenMetadataResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = getTokenMetadataValidateBeforeCall(tokenid, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokenMetadataOfUtxo
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTokenMetadataOfUtxoCall(String tokenid, String utxo, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ntp1/tokenmetadata/{tokenid}/{utxo}"
            .replaceAll("\\{" + "tokenid" + "\\}", localVarApiClient.escapeString(tokenid.toString()))
            .replaceAll("\\{" + "utxo" + "\\}", localVarApiClient.escapeString(utxo.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokenMetadataOfUtxoValidateBeforeCall(String tokenid, String utxo, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'tokenid' is set
        if (tokenid == null) {
            throw new ApiException("Missing the required parameter 'tokenid' when calling getTokenMetadataOfUtxo(Async)");
        }
        
        // verify the required parameter 'utxo' is set
        if (utxo == null) {
            throw new ApiException("Missing the required parameter 'utxo' when calling getTokenMetadataOfUtxo(Async)");
        }
        

        okhttp3.Call localVarCall = getTokenMetadataOfUtxoCall(tokenid, utxo, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Get UTXO Metadata of Token
     * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @return GetTokenMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTokenMetadataResponse getTokenMetadataOfUtxo(String tokenid, String utxo) throws ApiException {
        ApiResponse<GetTokenMetadataResponse> localVarResp = getTokenMetadataOfUtxoWithHttpInfo(tokenid, utxo);
        return localVarResp.getData();
    }

    /**
     * Get UTXO Metadata of Token
     * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @return ApiResponse&lt;GetTokenMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTokenMetadataResponse> getTokenMetadataOfUtxoWithHttpInfo(String tokenid, String utxo) throws ApiException {
        okhttp3.Call localVarCall = getTokenMetadataOfUtxoValidateBeforeCall(tokenid, utxo, null, null);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get UTXO Metadata of Token (asynchronously)
     * Returns the metadata associated with a token for that specific utxo instead of the issuance transaction. 
     * @param tokenid TokenId to request metadata for (required)
     * @param utxo Specific UTXO to request metadata for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTokenMetadataOfUtxoAsync(String tokenid, String utxo, final ApiCallback<GetTokenMetadataResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = getTokenMetadataOfUtxoValidateBeforeCall(tokenid, utxo, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTokenMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionInfo
     * @param txid Neblio txid to get information on. (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getTransactionInfoCall(String txid, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ntp1/transactioninfo/{txid}"
            .replaceAll("\\{" + "txid" + "\\}", localVarApiClient.escapeString(txid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionInfoValidateBeforeCall(String txid, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'txid' is set
        if (txid == null) {
            throw new ApiException("Missing the required parameter 'txid' when calling getTransactionInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getTransactionInfoCall(txid, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Information On an NTP1 Transaction
     * Returns detailed information regarding an NTP1 transaction. 
     * @param txid Neblio txid to get information on. (required)
     * @return GetTransactionInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTransactionInfoResponse getTransactionInfo(String txid) throws ApiException {
        ApiResponse<GetTransactionInfoResponse> localVarResp = getTransactionInfoWithHttpInfo(txid);
        return localVarResp.getData();
    }

    /**
     * Information On an NTP1 Transaction
     * Returns detailed information regarding an NTP1 transaction. 
     * @param txid Neblio txid to get information on. (required)
     * @return ApiResponse&lt;GetTransactionInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTransactionInfoResponse> getTransactionInfoWithHttpInfo(String txid) throws ApiException {
        okhttp3.Call localVarCall = getTransactionInfoValidateBeforeCall(txid, null, null);
        Type localVarReturnType = new TypeToken<GetTransactionInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Information On an NTP1 Transaction (asynchronously)
     * Returns detailed information regarding an NTP1 transaction. 
     * @param txid Neblio txid to get information on. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getTransactionInfoAsync(String txid, final ApiCallback<GetTransactionInfoResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = getTransactionInfoValidateBeforeCall(txid, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTransactionInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issueToken
     * @param issueTokenRequest Object representing the token to be created (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call issueTokenCall(IssueTokenRequest issueTokenRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = issueTokenRequest;

        // create path and map variables
        String localVarPath = "/ntp1/issue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issueTokenValidateBeforeCall(IssueTokenRequest issueTokenRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'issueTokenRequest' is set
        if (issueTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'issueTokenRequest' when calling issueToken(Async)");
        }
        

        okhttp3.Call localVarCall = issueTokenCall(issueTokenRequest, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Builds a transaction that issues a new NTP1 Token
     * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
     * @param issueTokenRequest Object representing the token to be created (required)
     * @return IssueTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IssueTokenResponse issueToken(IssueTokenRequest issueTokenRequest) throws ApiException {
        ApiResponse<IssueTokenResponse> localVarResp = issueTokenWithHttpInfo(issueTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Builds a transaction that issues a new NTP1 Token
     * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
     * @param issueTokenRequest Object representing the token to be created (required)
     * @return ApiResponse&lt;IssueTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IssueTokenResponse> issueTokenWithHttpInfo(IssueTokenRequest issueTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = issueTokenValidateBeforeCall(issueTokenRequest, null, null);
        Type localVarReturnType = new TypeToken<IssueTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Builds a transaction that issues a new NTP1 Token (asynchronously)
     * Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain. 
     * @param issueTokenRequest Object representing the token to be created (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call issueTokenAsync(IssueTokenRequest issueTokenRequest, final ApiCallback<IssueTokenResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = issueTokenValidateBeforeCall(issueTokenRequest, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<IssueTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendToken
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @param _progressListener Progress listener
     * @param _progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call sendTokenCall(SendTokenRequest sendTokenRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        Object localVarPostBody = sendTokenRequest;

        // create path and map variables
        String localVarPath = "/ntp1/sendtoken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (_progressListener != null) {
            localVarApiClient.setHttpClient(localVarApiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), _progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTokenValidateBeforeCall(SendTokenRequest sendTokenRequest, final ProgressResponseBody.ProgressListener _progressListener, final ProgressRequestBody.ProgressRequestListener _progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sendTokenRequest' is set
        if (sendTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'sendTokenRequest' when calling sendToken(Async)");
        }
        

        okhttp3.Call localVarCall = sendTokenCall(sendTokenRequest, _progressListener, _progressRequestListener);
        return localVarCall;

    }

    /**
     * Builds a transaction that sends an NTP1 Token
     * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @return SendTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SendTokenResponse sendToken(SendTokenRequest sendTokenRequest) throws ApiException {
        ApiResponse<SendTokenResponse> localVarResp = sendTokenWithHttpInfo(sendTokenRequest);
        return localVarResp.getData();
    }

    /**
     * Builds a transaction that sends an NTP1 Token
     * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @return ApiResponse&lt;SendTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SendTokenResponse> sendTokenWithHttpInfo(SendTokenRequest sendTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = sendTokenValidateBeforeCall(sendTokenRequest, null, null);
        Type localVarReturnType = new TypeToken<SendTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Builds a transaction that sends an NTP1 Token (asynchronously)
     * Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain. 
     * @param sendTokenRequest Object representing the token to be sent (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call sendTokenAsync(SendTokenRequest sendTokenRequest, final ApiCallback<SendTokenResponse> _callback) throws ApiException {

        ProgressResponseBody.ProgressListener _progressListener = null;
        ProgressRequestBody.ProgressRequestListener _progressRequestListener = null;

        if (_callback != null) {
            _progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    _callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            _progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    _callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call localVarCall = sendTokenValidateBeforeCall(sendTokenRequest, _progressListener, _progressRequestListener);
        Type localVarReturnType = new TypeToken<SendTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
